/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DiamondPrice, // @ts-ignore
  Organization,
} from "@prisma/client";

export class DiamondPriceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.DiamondPriceCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiamondPriceCountArgs>
  ): Promise<number> {
    return this.prisma.diamondPrice.count(args);
  }

  async diamondPrices<T extends Prisma.DiamondPriceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiamondPriceFindManyArgs>
  ): Promise<DiamondPrice[]> {
    return this.prisma.diamondPrice.findMany(args);
  }
  async diamondPrice<T extends Prisma.DiamondPriceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiamondPriceFindUniqueArgs>
  ): Promise<DiamondPrice | null> {
    return this.prisma.diamondPrice.findUnique(args);
  }
  async createDiamondPrice<T extends Prisma.DiamondPriceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiamondPriceCreateArgs>
  ): Promise<DiamondPrice> {
    return this.prisma.diamondPrice.create<T>(args);
  }
  async updateDiamondPrice<T extends Prisma.DiamondPriceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiamondPriceUpdateArgs>
  ): Promise<DiamondPrice> {
    return this.prisma.diamondPrice.update<T>(args);
  }
  async deleteDiamondPrice<T extends Prisma.DiamondPriceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiamondPriceDeleteArgs>
  ): Promise<DiamondPrice> {
    return this.prisma.diamondPrice.delete(args);
  }

  async findOrganizations(
    parentId: string,
    args: Prisma.OrganizationFindManyArgs
  ): Promise<Organization[]> {
    return this.prisma.diamondPrice
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organizations(args);
  }
}
