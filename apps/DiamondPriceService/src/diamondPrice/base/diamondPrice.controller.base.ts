/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DiamondPriceService } from "../diamondPrice.service";
import { DiamondPriceCreateInput } from "./DiamondPriceCreateInput";
import { DiamondPrice } from "./DiamondPrice";
import { DiamondPriceFindManyArgs } from "./DiamondPriceFindManyArgs";
import { DiamondPriceWhereUniqueInput } from "./DiamondPriceWhereUniqueInput";
import { DiamondPriceUpdateInput } from "./DiamondPriceUpdateInput";
import { OrganizationFindManyArgs } from "../../organization/base/OrganizationFindManyArgs";
import { Organization } from "../../organization/base/Organization";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";

export class DiamondPriceControllerBase {
  constructor(protected readonly service: DiamondPriceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DiamondPrice })
  async createDiamondPrice(
    @common.Body() data: DiamondPriceCreateInput
  ): Promise<DiamondPrice> {
    return await this.service.createDiamondPrice({
      data: data,
      select: {
        createdAt: true,
        id: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DiamondPrice] })
  @ApiNestedQuery(DiamondPriceFindManyArgs)
  async diamondPrices(@common.Req() request: Request): Promise<DiamondPrice[]> {
    const args = plainToClass(DiamondPriceFindManyArgs, request.query);
    return this.service.diamondPrices({
      ...args,
      select: {
        createdAt: true,
        id: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DiamondPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async diamondPrice(
    @common.Param() params: DiamondPriceWhereUniqueInput
  ): Promise<DiamondPrice | null> {
    const result = await this.service.diamondPrice({
      where: params,
      select: {
        createdAt: true,
        id: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DiamondPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDiamondPrice(
    @common.Param() params: DiamondPriceWhereUniqueInput,
    @common.Body() data: DiamondPriceUpdateInput
  ): Promise<DiamondPrice | null> {
    try {
      return await this.service.updateDiamondPrice({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DiamondPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDiamondPrice(
    @common.Param() params: DiamondPriceWhereUniqueInput
  ): Promise<DiamondPrice | null> {
    try {
      return await this.service.deleteDiamondPrice({
        where: params,
        select: {
          createdAt: true,
          id: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/organizations")
  @ApiNestedQuery(OrganizationFindManyArgs)
  async findOrganizations(
    @common.Req() request: Request,
    @common.Param() params: DiamondPriceWhereUniqueInput
  ): Promise<Organization[]> {
    const query = plainToClass(OrganizationFindManyArgs, request.query);
    const results = await this.service.findOrganizations(params.id, {
      ...query,
      select: {
        bigoId: true,
        confirmState: true,
        createdAt: true,
        diamondCount: true,

        diamondPrice: {
          select: {
            id: true,
          },
        },

        id: true,
        isSendSms: true,
        lastestToken: true,
        name: true,
        operators: true,
        orders: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizations")
  async connectOrganizations(
    @common.Param() params: DiamondPriceWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizations: {
        connect: body,
      },
    };
    await this.service.updateDiamondPrice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizations")
  async updateOrganizations(
    @common.Param() params: DiamondPriceWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizations: {
        set: body,
      },
    };
    await this.service.updateDiamondPrice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizations")
  async disconnectOrganizations(
    @common.Param() params: DiamondPriceWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizations: {
        disconnect: body,
      },
    };
    await this.service.updateDiamondPrice({
      where: params,
      data,
      select: { id: true },
    });
  }
}
